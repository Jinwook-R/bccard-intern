{"ast":null,"code":"import { signin } from '../api/ApiService';\nimport { all, fork, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport * as actions from '../reducers/user';\nimport { SIGN_IN_FAILURE, SIGN_IN_SUCCESS, SIGN_OUT_FAILURE, SIGN_OUT_SUCCESS } from \"../reducers/user\";\nexport const initialState = {\n  user: null,\n  signInLoading: false,\n  signInSucceed: false,\n  signInError: null\n};\n\nfunction signInAPI(data) {\n  return signin(data);\n}\n\nfunction* signIn({\n  payload\n}) {\n  try {\n    const {\n      signInData\n    } = payload;\n    const result = yield call(signInAPI, signInData);\n    yield put({\n      //put -> dispatch와 동일\n      type: SIGN_IN_SUCCESS,\n      payload: result\n    });\n  } catch (err) {\n    alert(err.error);\n    yield put({\n      type: SIGN_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signOutAPI() {// return signout();\n}\n\nfunction* signOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignIn() {\n  yield takeEvery(actions.SIGN_IN_REQUEST, signIn); // yield takeEvery(actions.SIGN_OUT_REQUEST, signOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignIn) // fork(watchSignUp),\n  ]);\n}","map":{"version":3,"sources":["/Users/bccard/Desktop/bccard-intern/client/sagas/user.js"],"names":["signin","all","fork","takeEvery","call","put","delay","actions","SIGN_IN_FAILURE","SIGN_IN_SUCCESS","SIGN_OUT_FAILURE","SIGN_OUT_SUCCESS","initialState","user","signInLoading","signInSucceed","signInError","signInAPI","data","signIn","payload","signInData","result","type","err","alert","error","response","signOutAPI","signOut","console","watchSignIn","SIGN_IN_REQUEST","userSaga"],"mappings":"AAAA,SAAQA,MAAR,QAAqB,mBAArB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAAQC,eAAR,EAAyBC,eAAzB,EAA0CC,gBAA1C,EAA4DC,gBAA5D,QAAmF,kBAAnF;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,IAAI,EAAE,IADkB;AAExBC,EAAAA,aAAa,EAAE,KAFS;AAGxBC,EAAAA,aAAa,EAAE,KAHS;AAIxBC,EAAAA,WAAW,EAAE;AAJW,CAArB;;AAOP,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAOlB,MAAM,CAACkB,IAAD,CAAb;AACH;;AAED,UAAUC,MAAV,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAA4B;AACxB,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAeD,OAArB;AACA,UAAME,MAAM,GAAG,MAAMlB,IAAI,CAACa,SAAD,EAAYI,UAAZ,CAAzB;AAEA,UAAMhB,GAAG,CAAC;AAAE;AACRkB,MAAAA,IAAI,EAAEd,eADA;AAENW,MAAAA,OAAO,EAAEE;AAFH,KAAD,CAAT;AAKH,GATD,CASE,OAAOE,GAAP,EAAY;AACVC,IAAAA,KAAK,CAACD,GAAG,CAACE,KAAL,CAAL;AACA,UAAMrB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEf,eADA;AAENkB,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASU,UAAT,GAAsB,CAClB;AACH;;AAED,UAAUC,OAAV,GAAoB;AAChB,MAAI;AACA;AACA,UAAMvB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOa,GAAP,EAAY;AACVM,IAAAA,OAAO,CAACJ,KAAR,CAAcF,GAAd;AACA,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAEb,gBADA;AAENgB,MAAAA,KAAK,EAAEF,GAAG,CAACG,QAAJ,CAAaT;AAFd,KAAD,CAAT;AAIH;AACJ;;AAGD,UAAUa,WAAV,GAAwB;AACpB,QAAM5B,SAAS,CAACI,OAAO,CAACyB,eAAT,EAA0Bb,MAA1B,CAAf,CADoB,CAEpB;AACH;;AAED,eAAe,UAAUc,QAAV,GAAqB;AAChC,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAAC6B,WAAD,CADE,CAEN;AAFM,GAAD,CAAT;AAIH","sourcesContent":["import {signin} from '../api/ApiService';\nimport { all, fork, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport * as actions from '../reducers/user';\nimport {SIGN_IN_FAILURE, SIGN_IN_SUCCESS, SIGN_OUT_FAILURE, SIGN_OUT_SUCCESS} from \"../reducers/user\";\n\nexport const initialState = {\n    user: null,\n    signInLoading: false,\n    signInSucceed: false,\n    signInError: null\n}\n\nfunction signInAPI(data) {\n    return signin(data);\n}\n\nfunction* signIn({payload}) {\n    try {\n        const {signInData} = payload;\n        const result = yield call(signInAPI, signInData);\n\n        yield put({ //put -> dispatch와 동일\n            type: SIGN_IN_SUCCESS,\n            payload: result,\n        });\n\n    } catch (err) {\n        alert(err.error);\n        yield put({\n            type: SIGN_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction signOutAPI() {\n    // return signout();\n}\n\nfunction* signOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: SIGN_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: SIGN_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\n\nfunction* watchSignIn() {\n    yield takeEvery(actions.SIGN_IN_REQUEST, signIn);\n    // yield takeEvery(actions.SIGN_OUT_REQUEST, signOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchSignIn),\n        // fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}