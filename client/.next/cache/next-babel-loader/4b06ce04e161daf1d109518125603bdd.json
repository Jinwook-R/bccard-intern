{"ast":null,"code":"import { logIn, signup } from '../api/ApiService';\nimport { all, fork, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport * as actions from '../reducers/user';\nimport { SIGN_IN_FAILURE, SIGN_IN_SUCCESS, SIGN_UP_SUCCESS, SIGN_OUT_FAILURE, SIGN_OUT_SUCCESS } from \"../reducers/user\";\nexport const initialState = {\n  user: null,\n  signInLoading: false,\n  signInSucceed: false,\n  signInError: null\n};\n\nfunction signInAPI(data) {\n  return logIn(data);\n}\n\nfunction* signIn({\n  payload\n}) {\n  try {\n    const {\n      signInData\n    } = payload;\n    const result = yield call(signInAPI, signInData);\n    yield put({\n      type: SIGN_IN_SUCCESS,\n      payload: result\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: SIGN_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return signup(data);\n}\n\nfunction* signUp({\n  payload\n}) {\n  try {\n    const {\n      signUpData\n    } = payload;\n    const result = yield call(signUpAPI, signUpData);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      payload: result\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction signOutAPI() {// return signout();\n}\n\nfunction* signOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignIn() {\n  yield takeEvery(actions.SIGN_IN_REQUEST, signIn);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(actions.SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignIn), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/jin/Desktop/bi/client/sagas/user.js"],"names":["logIn","signup","all","fork","takeEvery","call","put","delay","actions","SIGN_IN_FAILURE","SIGN_IN_SUCCESS","SIGN_UP_SUCCESS","SIGN_OUT_FAILURE","SIGN_OUT_SUCCESS","initialState","user","signInLoading","signInSucceed","signInError","signInAPI","data","signIn","payload","signInData","result","type","err","console","log","error","response","signUpAPI","signUp","signUpData","signOutAPI","signOut","watchSignIn","SIGN_IN_REQUEST","watchSignUp","SIGN_UP_REQUEST","userSaga"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,MAAf,QAA4B,mBAA5B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAAQC,eAAR,EAAyBC,eAAzB,EAA0CC,eAA1C,EAA2DC,gBAA3D,EAA6EC,gBAA7E,QAAoG,kBAApG;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,IAAI,EAAE,IADkB;AAExBC,EAAAA,aAAa,EAAE,KAFS;AAGxBC,EAAAA,aAAa,EAAE,KAHS;AAIxBC,EAAAA,WAAW,EAAE;AAJW,CAArB;;AAOP,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACrB,SAAOpB,KAAK,CAACoB,IAAD,CAAZ;AACH;;AAED,UAAUC,MAAV,CAAiB;AAACC,EAAAA;AAAD,CAAjB,EAA4B;AACxB,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAeD,OAArB;AACA,UAAME,MAAM,GAAG,MAAMnB,IAAI,CAACc,SAAD,EAAYI,UAAZ,CAAzB;AACA,UAAMjB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEf,eADA;AAENY,MAAAA,OAAO,EAAEE;AAFH,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAMpB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEhB,eADA;AAENoB,MAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASW,SAAT,CAAmBX,IAAnB,EAAyB;AACrB,SAAOnB,MAAM,CAACmB,IAAD,CAAb;AACH;;AAED,UAAUY,MAAV,CAAiB;AAACV,EAAAA;AAAD,CAAjB,EAA4B;AACxB,MAAI;AACA,UAAM;AAACW,MAAAA;AAAD,QAAeX,OAArB;AACA,UAAME,MAAM,GAAG,MAAMnB,IAAI,CAAC0B,SAAD,EAAYE,UAAZ,CAAzB;AAEA,UAAM3B,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEd,eADA;AAENW,MAAAA,OAAO,EAAEE;AAFH,KAAD,CAAT;AAIH,GARD,CAQE,OAAOE,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;;AAED,SAASQ,UAAT,GAAsB,CAClB;AACH;;AAED,UAAUC,OAAV,GAAoB;AAChB,MAAI;AACA;AACA,UAAM5B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEZ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOa,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACE,KAAR,CAAcH,GAAd;AACA,UAAMpB,GAAG,CAAC;AACNmB,MAAAA,IAAI,EAAEb,gBADA;AAENiB,MAAAA,KAAK,EAAEH,GAAG,CAACI,QAAJ,CAAaV;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUgB,WAAV,GAAwB;AACpB,QAAMhC,SAAS,CAACI,OAAO,CAAC6B,eAAT,EAA0BhB,MAA1B,CAAf;AACH;;AAED,UAAUiB,WAAV,GAAwB;AACpB,QAAMlC,SAAS,CAACI,OAAO,CAAC+B,eAAT,EAA0BP,MAA1B,CAAf;AACH;;AAED,eAAe,UAAUQ,QAAV,GAAqB;AAChC,QAAMtC,GAAG,CAAC,CACNC,IAAI,CAACiC,WAAD,CADE,EAENjC,IAAI,CAACmC,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import {logIn, signup} from '../api/ApiService';\nimport { all, fork, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport * as actions from '../reducers/user';\nimport {SIGN_IN_FAILURE, SIGN_IN_SUCCESS, SIGN_UP_SUCCESS, SIGN_OUT_FAILURE, SIGN_OUT_SUCCESS} from \"../reducers/user\";\n\nexport const initialState = {\n    user: null,\n    signInLoading: false,\n    signInSucceed: false,\n    signInError: null\n}\n\nfunction signInAPI(data) {\n    return logIn(data);\n}\n\nfunction* signIn({payload}) {\n    try {\n        const {signInData} = payload;\n        const result = yield call(signInAPI, signInData);\n        yield put({\n            type: SIGN_IN_SUCCESS,\n            payload: result,\n        });\n    } catch (err) {\n        console.log(err);\n        yield put({\n            type: SIGN_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction signUpAPI(data) {\n    return signup(data);\n}\n\nfunction* signUp({payload}) {\n    try {\n        const {signUpData} = payload;\n        const result = yield call(signUpAPI, signUpData);\n\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            payload: result,\n        });\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction signOutAPI() {\n    // return signout();\n}\n\nfunction* signOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: SIGN_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: SIGN_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchSignIn() {\n    yield takeEvery(actions.SIGN_IN_REQUEST, signIn);\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(actions.SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchSignIn),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}