{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(restaurantList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchRestaurantList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { restaurantlist } from '../api/ApiService';\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport * as actions from '../reducers/restaurant';\n\nfunction restaurantListAPI() {\n  return restaurantlist();\n}\n\nfunction restaurantList() {\n  var result;\n  return _regeneratorRuntime.wrap(function restaurantList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(restaurantListAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            //put -> dispatch와 동일\n            type: RESTAURANT_LIST_SUCCESS,\n            payload: result\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          alert(_context.t0.error);\n          _context.next = 13;\n          return put({\n            type: SIGN_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchRestaurantList() {\n  return _regeneratorRuntime.wrap(function watchRestaurantList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.RESTAURANT_LIST_REQUEST, restaurantList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchRestaurantList)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/jin/Desktop/bccard-intern/client/sagas/restaurant.js"],"names":["restaurantList","watchRestaurantList","userSaga","restaurantlist","all","fork","takeEvery","call","put","actions","restaurantListAPI","result","type","RESTAURANT_LIST_SUCCESS","payload","alert","error","SIGN_IN_FAILURE","response","data","RESTAURANT_LIST_REQUEST"],"mappings":";;oDASUA,c;qDAkBAC,mB;qDAIeC,Q;;AA/BzB,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;;AAGA,SAASC,iBAAT,GAA6B;AACzB,SAAOP,cAAc,EAArB;AACH;;AAED,SAAUH,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMO,IAAI,CAACG,iBAAD,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAIQ,iBAAMH,GAAG,CAAC;AAAE;AACRI,YAAAA,IAAI,EAAEC,uBADA;AAENC,YAAAA,OAAO,EAAEH;AAFH,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUQI,UAAAA,KAAK,CAAC,YAAIC,KAAL,CAAL;AAVR;AAWQ,iBAAMR,GAAG,CAAC;AACNI,YAAAA,IAAI,EAAEK,eADA;AAEND,YAAAA,KAAK,EAAE,YAAIE,QAAJ,CAAaC;AAFd,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUlB,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,SAAS,CAACG,OAAO,CAACW,uBAAT,EAAkCpB,cAAlC,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACJ,mBAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {restaurantlist} from '../api/ApiService';\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport * as actions from '../reducers/restaurant';\n\n\nfunction restaurantListAPI() {\n    return restaurantlist();\n}\n\nfunction* restaurantList() {\n    try {\n        const result = yield call(restaurantListAPI);\n        \n        yield put({ //put -> dispatch와 동일\n            type: RESTAURANT_LIST_SUCCESS,\n            payload: result,\n        });\n\n    } catch (err) {\n        alert(err.error);\n        yield put({\n            type: SIGN_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRestaurantList() {\n    yield takeEvery(actions.RESTAURANT_LIST_REQUEST, restaurantList);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchRestaurantList),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}