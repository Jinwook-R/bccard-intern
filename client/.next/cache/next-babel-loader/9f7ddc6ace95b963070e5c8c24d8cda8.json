{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jin/Desktop/bccard-intern/client/components/Avatar.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Upload, message } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n\nfunction getBase64(img, callback) {\n  var reader = new FileReader();\n  reader.addEventListener('load', function () {\n    return callback(reader.result);\n  });\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  var isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!');\n  }\n\n  var isLt2M = file.size / 1024 / 1024 < 2;\n\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n\n  return isJpgOrPng && isLt2M;\n}\n\nvar Avatar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Avatar, _React$Component);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar() {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      if (info.file.status === 'uploading') {\n        _this.setState({\n          loading: true\n        });\n\n        return;\n      }\n\n      if (info.file.status === 'done') {\n        // Get this url from response in real world.\n        getBase64(info.file.originFileObj, function (imageUrl) {\n          return _this.setState({\n            imageUrl: imageUrl,\n            loading: false\n          });\n        });\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          imageUrl = _this$state.imageUrl;\n\n      var uploadButton = __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }\n      }, loading ? __jsx(LoadingOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 28\n        }\n      }) : __jsx(PlusOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 50\n        }\n      }), __jsx(\"div\", {\n        style: {\n          marginTop: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, \"Upload\"));\n\n      return __jsx(Upload, {\n        name: \"avatar\",\n        listType: \"picture-card\",\n        className: \"avatar-uploader\",\n        showUploadList: false,\n        action: \"https://www.mocky.io/v2/5cc8019d300000980a055e76\",\n        beforeUpload: beforeUpload,\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, imageUrl ? __jsx(\"img\", {\n        src: imageUrl,\n        alt: \"avatar\",\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }\n      }) : uploadButton);\n    }\n  }]);\n\n  return Avatar;\n}(React.Component);\n\nexport default Avatar;","map":{"version":3,"sources":["/Users/jin/Desktop/bccard-intern/client/components/Avatar.js"],"names":["Upload","message","LoadingOutlined","PlusOutlined","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","isJpgOrPng","type","error","isLt2M","size","Avatar","loading","info","status","setState","originFileObj","imageUrl","state","uploadButton","marginTop","handleChange","width","React","Component"],"mappings":"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","sourcesContent":["import { Upload, message } from 'antd';\nimport { LoadingOutlined, PlusOutlined } from '@ant-design/icons';\n\nfunction getBase64(img, callback) {\n    const reader = new FileReader();\n    reader.addEventListener('load', () => callback(reader.result));\n    reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n    const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n    if (!isJpgOrPng) {\n        message.error('You can only upload JPG/PNG file!');\n    }\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) {\n        message.error('Image must smaller than 2MB!');\n    }\n    return isJpgOrPng && isLt2M;\n}\n\nclass Avatar extends React.Component {\n    state = {\n        loading: false,\n    };\n\n    handleChange = info => {\n        if (info.file.status === 'uploading') {\n            this.setState({ loading: true });\n            return;\n        }\n        if (info.file.status === 'done') {\n            // Get this url from response in real world.\n            getBase64(info.file.originFileObj, imageUrl =>\n                this.setState({\n                    imageUrl,\n                    loading: false,\n                }),\n            );\n        }\n    };\n\n    render() {\n        const { loading, imageUrl } = this.state;\n        const uploadButton = (\n            <div>\n                {loading ? <LoadingOutlined /> : <PlusOutlined />}\n                <div style={{ marginTop: 8 }}>Upload</div>\n            </div>\n        );\n        return (\n            <Upload\n                name=\"avatar\"\n                listType=\"picture-card\"\n                className=\"avatar-uploader\"\n                showUploadList={false}\n                action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n                beforeUpload={beforeUpload}\n                onChange={this.handleChange}\n            >\n                {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n            </Upload>\n        );\n    }\n}\n\nexport default Avatar"]},"metadata":{},"sourceType":"module"}