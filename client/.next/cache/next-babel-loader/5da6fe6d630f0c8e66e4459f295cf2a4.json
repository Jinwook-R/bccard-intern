{"ast":null,"code":"import { logIn, signup } from '../api/ApiService';\nimport { all, fork, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport * as actions from '../reducers/user';\nimport { SIGN_IN_FAILURE, SIGN_IN_SUCCESS, SIGN_UP_SUCCESS, SIGN_OUT_FAILURE, SIGN_OUT_SUCCESS, LOAD_USER_SUCCESS } from \"../reducers/user\";\n\nfunction loadUserAPI(data) {\n  console.log('loadUserAPI start');\n  return loadUserRequest(data);\n}\n\nfunction signInAPI(data) {\n  return logInRequest(data);\n}\n\nfunction* loadUser({\n  payload\n}) {\n  console.log('loadUser');\n\n  try {\n    const {\n      userData\n    } = payload;\n    const result = yield call(loadUserAPI, userData);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      payload: result\n    });\n  } catch (error) {}\n}\n\nfunction* signIn({\n  payload\n}) {\n  try {\n    const {\n      signInData\n    } = payload;\n    const result = yield call(signInAPI, signInData);\n    yield put({\n      type: SIGN_IN_SUCCESS,\n      payload: result\n    });\n  } catch (err) {\n    alert(err.response.data);\n    yield put({\n      type: SIGN_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  return signup(data);\n}\n\nfunction* signUp({\n  payload\n}) {\n  try {\n    const {\n      signUpData\n    } = payload;\n    const result = yield call(signUpAPI, signUpData);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      payload: result\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction signOutAPI() {// return signout();\n}\n\nfunction* signOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_OUT_SUCCESS\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: SIGN_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignIn() {\n  yield takeEvery(actions.SIGN_IN_REQUEST, signIn);\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(actions.SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(actions.LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchSignIn), fork(watchSignUp), fork(watchLoadUser)]);\n}","map":{"version":3,"sources":["/Users/jin/Desktop/bi/client/sagas/user.js"],"names":["logIn","signup","all","fork","takeEvery","call","put","delay","actions","SIGN_IN_FAILURE","SIGN_IN_SUCCESS","SIGN_UP_SUCCESS","SIGN_OUT_FAILURE","SIGN_OUT_SUCCESS","LOAD_USER_SUCCESS","loadUserAPI","data","console","log","loadUserRequest","signInAPI","logInRequest","loadUser","payload","userData","result","type","error","signIn","signInData","err","alert","response","signUpAPI","signUp","signUpData","signOutAPI","signOut","watchSignIn","SIGN_IN_REQUEST","watchSignUp","SIGN_UP_REQUEST","watchLoadUser","LOAD_USER_REQUEST","userSaga"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,MAAf,QAA4B,mBAA5B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,KAA1C,QAAuD,oBAAvD;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SACIC,eADJ,EAEIC,eAFJ,EAGIC,eAHJ,EAIIC,gBAJJ,EAKIC,gBALJ,EAMIC,iBANJ,QAOO,kBAPP;;AASA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,SAAOC,eAAe,CAACH,IAAD,CAAtB;AACH;;AAED,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AACrB,SAAOK,YAAY,CAACL,IAAD,CAAnB;AACH;;AAED,UAAUM,QAAV,CAAmB;AAACC,EAAAA;AAAD,CAAnB,EAA8B;AAC1BN,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACC,MAAI;AACD,UAAM;AAACM,MAAAA;AAAD,QAAaD,OAAnB;AACA,UAAME,MAAM,GAAG,MAAMpB,IAAI,CAACU,WAAD,EAAcS,QAAd,CAAzB;AAEA,UAAMlB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEZ,iBADA;AAENS,MAAAA,OAAO,EAAEE;AAFH,KAAD,CAAT;AAIH,GARA,CAQA,OAAOE,KAAP,EAAc,CAEd;AACJ;;AAED,UAAUC,MAAV,CAAiB;AAACL,EAAAA;AAAD,CAAjB,EAA4B;AACxB,MAAI;AACA,UAAM;AAACM,MAAAA;AAAD,QAAeN,OAArB;AACA,UAAME,MAAM,GAAG,MAAMpB,IAAI,CAACe,SAAD,EAAYS,UAAZ,CAAzB;AAEA,UAAMvB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEhB,eADA;AAENa,MAAAA,OAAO,EAAEE;AAFH,KAAD,CAAT;AAIH,GARD,CAQE,OAAOK,GAAP,EAAY;AACVC,IAAAA,KAAK,CAACD,GAAG,CAACE,QAAJ,CAAahB,IAAd,CAAL;AACA,UAAMV,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEjB,eADA;AAENkB,MAAAA,KAAK,EAAEG,GAAG,CAACE,QAAJ,CAAahB;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,SAASiB,SAAT,CAAmBjB,IAAnB,EAAyB;AACrB,SAAOf,MAAM,CAACe,IAAD,CAAb;AACH;;AAED,UAAUkB,MAAV,CAAiB;AAACX,EAAAA;AAAD,CAAjB,EAA4B;AACxB,MAAI;AACA,UAAM;AAACY,MAAAA;AAAD,QAAeZ,OAArB;AACA,UAAME,MAAM,GAAG,MAAMpB,IAAI,CAAC4B,SAAD,EAAYE,UAAZ,CAAzB;AAEA,UAAM7B,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEf,eADA;AAENY,MAAAA,OAAO,EAAEE;AAFH,KAAD,CAAT;AAIH,GARD,CAQE,OAAOK,GAAP,EAAY;AACVb,IAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ;AACH;AACJ;;AAED,SAASM,UAAT,GAAsB,CAClB;AACH;;AAED,UAAUC,OAAV,GAAoB;AAChB,MAAI;AACA;AACA,UAAM9B,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEb;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOiB,GAAP,EAAY;AACVb,IAAAA,OAAO,CAACU,KAAR,CAAcG,GAAd;AACA,UAAMxB,GAAG,CAAC;AACNoB,MAAAA,IAAI,EAAEd,gBADA;AAENe,MAAAA,KAAK,EAAEG,GAAG,CAACE,QAAJ,CAAahB;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUsB,WAAV,GAAwB;AACpB,QAAMlC,SAAS,CAACI,OAAO,CAAC+B,eAAT,EAA0BX,MAA1B,CAAf;AACH;;AAED,UAAUY,WAAV,GAAwB;AACpB,QAAMpC,SAAS,CAACI,OAAO,CAACiC,eAAT,EAA0BP,MAA1B,CAAf;AACH;;AAED,UAAUQ,aAAV,GAA0B;AACtB,QAAMtC,SAAS,CAACI,OAAO,CAACmC,iBAAT,EAA4BrB,QAA5B,CAAf;AACH;;AAED,eAAe,UAAUsB,QAAV,GAAqB;AAChC,QAAM1C,GAAG,CAAC,CACNC,IAAI,CAACmC,WAAD,CADE,EAENnC,IAAI,CAACqC,WAAD,CAFE,EAGNrC,IAAI,CAACuC,aAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import {logIn, signup} from '../api/ApiService';\nimport { all, fork, takeEvery, call, put, delay } from 'redux-saga/effects';\nimport * as actions from '../reducers/user';\nimport {\n    SIGN_IN_FAILURE,\n    SIGN_IN_SUCCESS,\n    SIGN_UP_SUCCESS,\n    SIGN_OUT_FAILURE,\n    SIGN_OUT_SUCCESS,\n    LOAD_USER_SUCCESS\n} from \"../reducers/user\";\n\nfunction loadUserAPI(data) {\n    console.log('loadUserAPI start');\n    return loadUserRequest(data);\n}\n\nfunction signInAPI(data) {\n    return logInRequest(data);\n}\n\nfunction* loadUser({payload}) {\n    console.log('loadUser');\n     try {\n        const {userData} = payload;\n        const result = yield call(loadUserAPI, userData);\n\n        yield put({\n            type: LOAD_USER_SUCCESS,\n            payload: result,\n        });\n    }catch (error) {\n\n    }\n}\n\nfunction* signIn({payload}) {\n    try {\n        const {signInData} = payload;\n        const result = yield call(signInAPI, signInData);\n\n        yield put({\n            type: SIGN_IN_SUCCESS,\n            payload: result,\n        });\n    } catch (err) {\n        alert(err.response.data);\n        yield put({\n            type: SIGN_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction signUpAPI(data) {\n    return signup(data);\n}\n\nfunction* signUp({payload}) {\n    try {\n        const {signUpData} = payload;\n        const result = yield call(signUpAPI, signUpData);\n\n        yield put({\n            type: SIGN_UP_SUCCESS,\n            payload: result,\n        });\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction signOutAPI() {\n    // return signout();\n}\n\nfunction* signOut() {\n    try {\n        // const result = yield call(logOutAPI);\n        yield delay(1000);\n        yield put({\n            type: SIGN_OUT_SUCCESS,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: SIGN_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchSignIn() {\n    yield takeEvery(actions.SIGN_IN_REQUEST, signIn);\n}\n\nfunction* watchSignUp() {\n    yield takeEvery(actions.SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchLoadUser() {\n    yield takeEvery(actions.LOAD_USER_REQUEST, loadUser);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchSignIn),\n        fork(watchSignUp),\n        fork(watchLoadUser),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}