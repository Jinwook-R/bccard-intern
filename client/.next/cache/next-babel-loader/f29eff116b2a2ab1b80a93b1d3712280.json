{"ast":null,"code":"import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from \"../sagas\";\n\nvar configureStore = function configureStore(context) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : composeWithDevTools(applyMiddleware.apply(void 0, middlewares));\n  var store = createStore(reducer, enhancer);\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/jin/Desktop/bccard-intern/client/store/configureStore.js"],"names":["applyMiddleware","createStore","compose","createWrapper","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","context","sagaMiddleware","middlewares","enhancer","store","run","wrapper","debug"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAChC,MAAMC,cAAc,GAAGL,oBAAoB,EAA3C;AACA,MAAMM,WAAW,GAAG,CAACD,cAAD,CAApB;AACA,MAAME,QAAQ,GAAG,QACXV,OAAO,CAACF,eAAe,MAAf,SAAmBW,WAAnB,CAAD,CADI,GAEXP,mBAAmB,CACjBJ,eAAe,MAAf,SAAmBW,WAAnB,CADiB,CAFzB;AAKA,MAAME,KAAK,GAAGZ,WAAW,CAACK,OAAD,EAAUM,QAAV,CAAzB;AACAF,EAAAA,cAAc,CAACI,GAAf,CAAmBP,QAAnB;AAEA,SAAOM,KAAP;AACH,CAZD;;AAcA,IAAME,OAAO,GAAGZ,aAAa,CAACK,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { applyMiddleware, createStore, compose } from 'redux';\nimport { createWrapper } from 'next-redux-wrapper';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport reducer from '../reducers';\nimport rootSaga from \"../sagas\";\n\nconst configureStore = (context) => {\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n    const enhancer = process.env.NODE_ENV === 'production'\n        ? compose(applyMiddleware(...middlewares))\n        : composeWithDevTools(\n            applyMiddleware(...middlewares),\n        );\n    const store = createStore(reducer, enhancer);\n    sagaMiddleware.run(rootSaga);\n\n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;\n"]},"metadata":{},"sourceType":"module"}