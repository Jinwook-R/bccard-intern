{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/jin/Desktop/bccard-intern/client/pages/_app.js\";\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport 'antd/dist/antd.css';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\nimport wrapper from \"../store/configureStore\";\nimport reducers from '../reducers';\nimport rootSaga from \"../sagas\"; //_app.js는 페이지들의 공통인 부분\n\nvar App = function App(_ref) {\n  var Component = _ref.Component;\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  }, \"BC\\uB85C\")), __jsx(Component, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }));\n};\n\n_c = App;\nApp.propTypes = {\n  Component: PropTypes.elementType.isRequired\n};\n\nvar configureStore = function configureStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware]; // const enhancer = process.env.NODE_ENV === 'production'\n  //     ? compose(applyMiddleware(...middlewares))\n  //     : compose(\n  //         applyMiddleware(...middlewares),\n  //         !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n  //     );\n\n  var store = createStore(reducers, initialState);\n  sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nexport default wrapper.withRedux(configureStore)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jin/Desktop/bccard-intern/client/pages/_app.js"],"names":["React","useState","applyMiddleware","compose","createStore","createSagaMiddleware","PropTypes","Head","wrapper","reducers","rootSaga","App","Component","propTypes","elementType","isRequired","configureStore","initialState","options","sagaMiddleware","middlewares","store","run","withRedux"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAO,oBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AAEA,OAAOC,QAAP,MAAqB,aAArB;AACA,OAAOC,QAAP,MAAqB,UAArB,C,CAEA;;AACA,IAAMC,GAAG,GAAG,SAANA,GAAM,OAAiB;AAAA,MAAfC,SAAe,QAAfA,SAAe;AAEzB,SACI,4BACI,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,EAII,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAQH,CAVD;;KAAMD,G;AAYNA,GAAG,CAACE,SAAJ,GAAgB;AACZD,EAAAA,SAAS,EAAEN,SAAS,CAACQ,WAAV,CAAsBC;AADrB,CAAhB;;AAIA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AAC9C,MAAMC,cAAc,GAAGd,oBAAoB,EAA3C;AACA,MAAMe,WAAW,GAAG,CAACD,cAAD,CAApB,CAF8C,CAG9C;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,KAAK,GAAGjB,WAAW,CAACK,QAAD,EAAWQ,YAAX,CAAzB;AACAE,EAAAA,cAAc,CAACG,GAAf,CAAmBZ,QAAnB;AACA,SAAOW,KAAP;AACH,CAZD;;AAcA,eAAeb,OAAO,CAACe,SAAR,CAAkBP,cAAlB,EAAkCL,GAAlC,CAAf","sourcesContent":["import React, {useState} from 'react';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport 'antd/dist/antd.css';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\nimport wrapper from \"../store/configureStore\";\n\nimport reducers from '../reducers';\nimport rootSaga from \"../sagas\";\n\n//_app.js는 페이지들의 공통인 부분\nconst App = ({Component}) => {\n\n    return (\n        <>\n            <Head>\n                <title>BC로</title>\n            </Head>\n            <Component/>\n        </>\n    );\n}\n\nApp.propTypes = {\n    Component: PropTypes.elementType.isRequired,\n}\n\nconst configureStore = (initialState, options) => {\n    const sagaMiddleware = createSagaMiddleware();\n    const middlewares = [sagaMiddleware];\n    // const enhancer = process.env.NODE_ENV === 'production'\n    //     ? compose(applyMiddleware(...middlewares))\n    //     : compose(\n    //         applyMiddleware(...middlewares),\n    //         !options.isServer && typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f,\n    //     );\n    const store = createStore(reducers, initialState);\n    sagaMiddleware.run(rootSaga);\n    return store;\n};\n\nexport default wrapper.withRedux(configureStore)(App);\n"]},"metadata":{},"sourceType":"module"}