{"ast":null,"code":"import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from './user';\nimport restaurant from \"./restaurant\";\nimport review from './review';\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nvar persistConfig = {\n  key: \"root\",\n  storage: storage,\n  // auth, board, studio 3개의 reducer 중에 auth reducer만 localstorage에 저장합니다.\n  whitelist: [\"user\"]\n};\n\nvar rootReducer = function rootReducer(state, action) {\n  switch (action.type) {\n    case HYDRATE:\n      return action.payload;\n\n    default:\n      {\n        var combinedReducer = combineReducers({\n          user: user,\n          restaurant: restaurant,\n          review: review\n        });\n        return combinedReducer(state, action);\n      }\n  }\n};\n\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["/Users/jin/Desktop/bi/client/reducers/index.js"],"names":["HYDRATE","combineReducers","user","restaurant","review","persistReducer","storage","persistConfig","key","whitelist","rootReducer","state","action","type","payload","combinedReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,IAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBF,EAAAA,OAAO,EAAPA,OAFkB;AAGlB;AACAG,EAAAA,SAAS,EAAE,CAAC,MAAD;AAJO,CAAtB;;AAOA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKb,OAAL;AACI,aAAOY,MAAM,CAACE,OAAd;;AACJ;AAAS;AACL,YAAMC,eAAe,GAAGd,eAAe,CAAC;AACpCC,UAAAA,IAAI,EAAJA,IADoC;AAEpCC,UAAAA,UAAU,EAAVA,UAFoC;AAGpCC,UAAAA,MAAM,EAANA;AAHoC,SAAD,CAAvC;AAKA,eAAOW,eAAe,CAACJ,KAAD,EAAQC,MAAR,CAAtB;AACH;AAVL;AAYH,CAbD;;AAeA,eAAeP,cAAc,CAACE,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\n\nimport user from './user';\nimport restaurant from \"./restaurant\";\nimport review from './review';\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig = {\n    key: \"root\",\n    storage,\n    // auth, board, studio 3개의 reducer 중에 auth reducer만 localstorage에 저장합니다.\n    whitelist: [\"user\"]\n};\n\nconst rootReducer = (state, action) => {\n    switch (action.type) {\n        case HYDRATE:\n            return action.payload;\n        default: {\n            const combinedReducer = combineReducers({\n                user,\n                restaurant,\n                review\n            });\n            return combinedReducer(state, action);\n        }\n    }\n};\n\nexport default persistReducer(persistConfig, rootReducer);\n\n"]},"metadata":{},"sourceType":"module"}