{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jin/Desktop/bccard-intern/client/components/Avatar.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Upload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\nvar Avatar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Avatar, _React$Component);\n\n  var _super = _createSuper(Avatar);\n\n  function Avatar() {\n    var _this;\n\n    _classCallCheck(this, Avatar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      fileList: [{\n        uid: '-1',\n        name: 'xxx.png',\n        status: 'done',\n        url: 'http://www.baidu.com/xxx.png'\n      }]\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (info) {\n      var fileList = _toConsumableArray(info.fileList); // 1. Limit the number of uploaded files\n      // Only to show two recent uploaded files, and old ones will be replaced by the new\n\n\n      fileList = fileList.slice(-2); // 2. Read from response and show file link\n\n      fileList = fileList.map(function (file) {\n        if (file.response) {\n          // Component will show file.url as link\n          file.url = file.response.url;\n        }\n\n        return file;\n      });\n\n      _this.setState({\n        fileList: fileList\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Avatar, [{\n    key: \"render\",\n    value: function render() {\n      var props = {\n        action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n        onChange: this.handleChange,\n        multiple: true\n      };\n      return __jsx(Upload, _extends({}, props, {\n        fileList: this.state.fileList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        icon: __jsx(UploadOutlined, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 31\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, \"Upload\"));\n    }\n  }]);\n\n  return Avatar;\n}(React.Component);","map":{"version":3,"sources":["/Users/jin/Desktop/bccard-intern/client/components/Avatar.js"],"names":["Upload","Button","UploadOutlined","Avatar","fileList","uid","name","status","url","info","slice","map","file","response","setState","props","action","onChange","handleChange","multiple","state","React","Component"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,EAAiBC,MAAjB,QAA+B,MAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B;;IAEMC,M;;;;;;;;;;;;;;;;4DACM;AACJC,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,GAAG,EAAE,IADT;AAEIC,QAAAA,IAAI,EAAE,SAFV;AAGIC,QAAAA,MAAM,EAAE,MAHZ;AAIIC,QAAAA,GAAG,EAAE;AAJT,OADM;AADN,K;;mEAWO,UAAAC,IAAI,EAAI;AACnB,UAAIL,QAAQ,sBAAOK,IAAI,CAACL,QAAZ,CAAZ,CADmB,CAGnB;AACA;;;AACAA,MAAAA,QAAQ,GAAGA,QAAQ,CAACM,KAAT,CAAe,CAAC,CAAhB,CAAX,CALmB,CAOnB;;AACAN,MAAAA,QAAQ,GAAGA,QAAQ,CAACO,GAAT,CAAa,UAAAC,IAAI,EAAI;AAC5B,YAAIA,IAAI,CAACC,QAAT,EAAmB;AACf;AACAD,UAAAA,IAAI,CAACJ,GAAL,GAAWI,IAAI,CAACC,QAAL,CAAcL,GAAzB;AACH;;AACD,eAAOI,IAAP;AACH,OANU,CAAX;;AAQA,YAAKE,QAAL,CAAc;AAAEV,QAAAA,QAAQ,EAARA;AAAF,OAAd;AACH,K;;;;;;;WAED,kBAAS;AACL,UAAMW,KAAK,GAAG;AACVC,QAAAA,MAAM,EAAE,kDADE;AAEVC,QAAAA,QAAQ,EAAE,KAAKC,YAFL;AAGVC,QAAAA,QAAQ,EAAE;AAHA,OAAd;AAKA,aACI,MAAC,MAAD,eAAYJ,KAAZ;AAAmB,QAAA,QAAQ,EAAE,KAAKK,KAAL,CAAWhB,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACI,MAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,CADJ;AAKH;;;;EA1CgBiB,KAAK,CAACC,S","sourcesContent":["import { Upload, Button } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\n\nclass Avatar extends React.Component {\n    state = {\n        fileList: [\n            {\n                uid: '-1',\n                name: 'xxx.png',\n                status: 'done',\n                url: 'http://www.baidu.com/xxx.png',\n            },\n        ],\n    };\n\n    handleChange = info => {\n        let fileList = [...info.fileList];\n\n        // 1. Limit the number of uploaded files\n        // Only to show two recent uploaded files, and old ones will be replaced by the new\n        fileList = fileList.slice(-2);\n\n        // 2. Read from response and show file link\n        fileList = fileList.map(file => {\n            if (file.response) {\n                // Component will show file.url as link\n                file.url = file.response.url;\n            }\n            return file;\n        });\n\n        this.setState({ fileList });\n    };\n\n    render() {\n        const props = {\n            action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n            onChange: this.handleChange,\n            multiple: true,\n        };\n        return (\n            <Upload {...props} fileList={this.state.fileList}>\n                <Button icon={<UploadOutlined />}>Upload</Button>\n            </Upload>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}