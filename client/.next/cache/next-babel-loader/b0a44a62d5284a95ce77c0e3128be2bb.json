{"ast":null,"code":"import { API_BASE_URL } from './config.js';\n\nfunction call(api, method, data) {\n  var headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n  var accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  var options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  return fetch(options.url, options).then(function (response) {\n    if (response.status !== 200) {\n      return Promise.reject(response);\n    }\n\n    return response;\n  });\n}\n\nexport function signin(user) {\n  console.log(user);\n  return call(\"/auth/signin\", \"POST\", user).then(function (response) {\n    console.log(\"response: \", response);\n\n    if (response.token) {\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n    }\n\n    return response;\n  });\n}\nexport function signup(user) {\n  return call(\"/auth/signup\", \"POST\", user).then(function (response) {\n    if (response.status === 200) {\n      alert(\"회원가입이 완료되었습니다:)\");\n      location.href = '/';\n    } else {\n      alert(\"회원가입에 실패하였습니다..\");\n    }\n  });\n}\nexport function signout() {\n  localStorage.setItem(\"ACCESS_TOKEN\", null);\n}\nexport function restaurantlist() {\n  return call(\"/restaurant/list\", \"GET\").then(function (response) {\n    if (response) {\n      console.log(\"response: \", response);\n    }\n\n    return response;\n  });\n}","map":{"version":3,"sources":["/Users/bccard/Desktop/bccard-intern/client/api/ApiService.js"],"names":["API_BASE_URL","call","api","method","data","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","status","Promise","reject","signin","user","console","log","token","setItem","signup","alert","location","href","signout","restaurantlist"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,aAA3B;;AACA,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,IAA3B,EAAgC;AAC5B,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACtB,oBAAe;AADO,GAAZ,CAAd;AAIA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;;AACA,MAAGF,WAAW,IAAIA,WAAW,KAAK,IAAlC,EAAuC;AACnCF,IAAAA,OAAO,CAACK,MAAR,CAAe,eAAf,EAAgC,YAAWH,WAA3C;AACH;;AAED,MAAMI,OAAO,GAAG;AACZN,IAAAA,OAAO,EAAEA,OADG;AAEZO,IAAAA,GAAG,EAAEZ,YAAY,GAAGE,GAFR;AAGZC,IAAAA,MAAM,EAAEA;AAHI,GAAhB;;AAMA,MAAGC,IAAH,EAAQ;AACJO,IAAAA,OAAO,CAACE,IAAR,GAAcC,IAAI,CAACC,SAAL,CAAeX,IAAf,CAAd;AACH;;AAED,SAAOY,KAAK,CAACL,OAAO,CAACC,GAAT,EAAcD,OAAd,CAAL,CAA4BM,IAA5B,CAAiC,UAACC,QAAD,EACpC;AAEI,QAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxB,aAAOC,OAAO,CAACC,MAAR,CAAeH,QAAf,CAAP;AACH;;AACD,WAAOA,QAAP;AACH,GAPE,CAAP;AAQH;;AAED,OAAO,SAASI,MAAT,CAAgBC,IAAhB,EAAsB;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAOtB,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyBsB,IAAzB,CAAJ,CACFN,IADE,CACG,UAACC,QAAD,EAAc;AAChBM,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,QAA1B;;AACA,QAAGA,QAAQ,CAACQ,KAAZ,EAAkB;AACdlB,MAAAA,YAAY,CAACmB,OAAb,CAAqB,cAArB,EAAqCT,QAAQ,CAACQ,KAA9C;AACH;;AACD,WAAOR,QAAP;AACH,GAPE,CAAP;AAQH;AAED,OAAO,SAASU,MAAT,CAAgBL,IAAhB,EAAsB;AACzB,SAAOtB,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyBsB,IAAzB,CAAJ,CACFN,IADE,CACG,UAACC,QAAD,EAAc;AAEhB,QAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxBU,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACAC,MAAAA,QAAQ,CAACC,IAAT,GAAgB,GAAhB;AACH,KAHD,MAGO;AACHF,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH;AACJ,GATE,CAAP;AAUH;AAED,OAAO,SAASG,OAAT,GAAmB;AACtBxB,EAAAA,YAAY,CAACmB,OAAb,CAAqB,cAArB,EAAqC,IAArC;AACH;AAID,OAAO,SAASM,cAAT,GAA0B;AAC7B,SAAOhC,IAAI,CAAC,kBAAD,EAAqB,KAArB,CAAJ,CACFgB,IADE,CACG,UAACC,QAAD,EAAc;AAChB,QAAGA,QAAH,EAAa;AACTM,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,QAA1B;AACH;;AACD,WAAOA,QAAP;AACH,GANE,CAAP;AAOH","sourcesContent":["import {API_BASE_URL} from './config.js';\nfunction call(api, method, data){\n    let headers = new Headers({\n        \"Content-Type\":\"application/json\",\n    });\n\n    const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n    if(accessToken && accessToken !== null){\n        headers.append(\"Authorization\", \"Bearer \"+ accessToken);\n    }\n\n    const options = {\n        headers: headers,\n        url: API_BASE_URL + api,\n        method: method,\n    };\n\n    if(data){\n        options.body= JSON.stringify(data);\n    }\n\n    return fetch(options.url, options).then((response) =>\n        {\n\n            if(response.status !== 200) {\n                return Promise.reject(response);\n            }\n            return response;\n        });\n}\n\nexport function signin(user) {\n    console.log(user);\n    return call(\"/auth/signin\", \"POST\", user)\n        .then((response) => {\n            console.log(\"response: \", response);\n            if(response.token){\n                localStorage.setItem(\"ACCESS_TOKEN\", response.token);\n            }\n            return response;\n        });\n}\n\nexport function signup(user) {\n    return call(\"/auth/signup\", \"POST\", user)\n        .then((response) => {\n\n            if(response.status === 200) {\n                alert(\"회원가입이 완료되었습니다:)\");\n                location.href = '/'\n            } else {\n                alert(\"회원가입에 실패하였습니다..\");\n            }\n        });\n}\n\nexport function signout() {\n    localStorage.setItem(\"ACCESS_TOKEN\", null);\n}\n\n\n\nexport function restaurantlist() {\n    return call(\"/restaurant/list\", \"GET\")\n        .then((response) => {\n            if(response) {\n                console.log(\"response: \", response);\n            }\n            return response;\n        });\n}"]},"metadata":{},"sourceType":"module"}