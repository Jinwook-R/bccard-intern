{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(restaurantList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchRestaurantList),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(restaurantSaga);\n\nimport { restaurantlist } from '../api/ApiService';\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport * as actions from '../reducers/restaurant';\nimport { RESTAURANT_LIST_SUCCESS, RESTAURANT_LIST_FAILURE } from \"../reducers/restaurant\";\n\nfunction restaurantListAPI() {\n  return restaurantlist();\n}\n\nfunction restaurantList() {\n  var result;\n  return _regeneratorRuntime.wrap(function restaurantList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          alert('#####');\n          _context.prev = 1;\n          _context.next = 4;\n          return call(restaurantListAPI);\n\n        case 4:\n          result = _context.sent;\n          _context.next = 7;\n          return put({\n            type: RESTAURANT_LIST_SUCCESS,\n            payload: result\n          });\n\n        case 7:\n          _context.next = 14;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          alert(_context.t0.error);\n          _context.next = 14;\n          return put({\n            type: RESTAURANT_LIST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction watchRestaurantList() {\n  return _regeneratorRuntime.wrap(function watchRestaurantList$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.RESTAURANT_LIST_REQUEST, restaurantList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function restaurantSaga() {\n  return _regeneratorRuntime.wrap(function restaurantSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchRestaurantList)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["/Users/bccard/Desktop/bccard-intern/client/sagas/restaurant.js"],"names":["restaurantList","watchRestaurantList","restaurantSaga","restaurantlist","all","fork","takeEvery","call","put","actions","RESTAURANT_LIST_SUCCESS","RESTAURANT_LIST_FAILURE","restaurantListAPI","alert","result","type","payload","error","response","data","RESTAURANT_LIST_REQUEST"],"mappings":";;oDASUA,c;qDAmBAC,mB;qDAIeC,c;;AAhCzB,SAAQC,cAAR,QAA6B,mBAA7B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,OAAO,KAAKC,OAAZ,MAAyB,wBAAzB;AACA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,wBAA/D;;AAEA,SAASC,iBAAT,GAA6B;AACzB,SAAOT,cAAc,EAArB;AACH;;AAED,SAAUH,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACIa,UAAAA,KAAK,CAAC,OAAD,CAAL;AADJ;AAAA;AAGuB,iBAAMN,IAAI,CAACK,iBAAD,CAAV;;AAHvB;AAGcE,UAAAA,MAHd;AAAA;AAKQ,iBAAMN,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEL,uBADA;AAENM,YAAAA,OAAO,EAAEF;AAFH,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWQD,UAAAA,KAAK,CAAC,YAAII,KAAL,CAAL;AAXR;AAYQ,iBAAMT,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEJ,uBADA;AAENM,YAAAA,KAAK,EAAE,YAAIC,QAAJ,CAAaC;AAFd,WAAD,CAAT;;AAZR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUlB,mBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,SAAS,CAACG,OAAO,CAACW,uBAAT,EAAkCpB,cAAlC,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNC,IAAI,CAACJ,mBAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {restaurantlist} from '../api/ApiService';\nimport { all, fork, takeEvery, call, put } from 'redux-saga/effects';\nimport * as actions from '../reducers/restaurant';\nimport {RESTAURANT_LIST_SUCCESS, RESTAURANT_LIST_FAILURE} from \"../reducers/restaurant\";\n\nfunction restaurantListAPI() {\n    return restaurantlist();\n}\n\nfunction* restaurantList() {\n    alert('#####')\n    try {\n        const result = yield call(restaurantListAPI);\n\n        yield put({\n            type: RESTAURANT_LIST_SUCCESS,\n            payload: result,\n        });\n\n    } catch (err) {\n        alert(err.error);\n        yield put({\n            type: RESTAURANT_LIST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRestaurantList() {\n    yield takeEvery(actions.RESTAURANT_LIST_REQUEST, restaurantList);\n}\n\nexport default function* restaurantSaga() {\n    yield all([\n        fork(watchRestaurantList),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}